{"/home/travis/build/npmtest/node-npmtest-tcomb-form-native/test.js":"/* istanbul instrument in package npmtest_tcomb_form_native */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/lib.npmtest_tcomb_form_native.js":"/* istanbul instrument in package npmtest_tcomb_form_native */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tcomb_form_native = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tcomb_form_native = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tcomb-form-native && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tcomb_form_native */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tcomb_form_native\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tcomb_form_native.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tcomb_form_native.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tcomb_form_native.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tcomb_form_native.__dirname + '/lib.npmtest_tcomb_form_native.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/index.js":"import t from './lib';\nimport i18n from './lib/i18n/en';\nimport templates from './lib/templates/bootstrap';\nimport stylesheet from './lib/stylesheets/bootstrap';\n\nt.form.Form.templates = templates;\nt.form.Form.stylesheet = stylesheet;\nt.form.Form.i18n = i18n;\n\nt.form.Form.defaultProps = {\n  templates: t.form.Form.templates,\n  stylesheet: t.form.Form.stylesheet,\n  i18n: t.form.Form.i18n\n};\n\nmodule.exports = t;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/components.js":"import React from 'react';\nimport t from 'tcomb-validation';\nimport {\n  humanize,\n  merge,\n  getTypeInfo,\n  getOptionsOfEnum,\n  move,\n  UIDGenerator,\n  getTypeFromUnion,\n  getComponentOptions\n} from './util';\n\nconst SOURCE = 'tcomb-form-native';\nconst nooptions = Object.freeze({});\nconst noop = function () {};\nconst noobj = Object.freeze({});\nconst noarr = Object.freeze([]);\nconst Nil = t.Nil;\n\nfunction getFormComponent(type, options) {\n  if (options.factory) {\n    return options.factory;\n  }\n  if (type.getTcombFormFactory) {\n    return type.getTcombFormFactory(options);\n  }\n  const name = t.getTypeName(type);\n  switch (type.meta.kind) {\n    case 'irreducible' :\n      return (\n        type === t.Boolean ? Checkbox :\n        type === t.Date ?  DatePicker :\n                          Textbox\n      );\n    case 'struct' :\n      return Struct;\n    case 'list' :\n      return List;\n    case 'enums' :\n      return Select;\n    case 'maybe' :\n    case 'subtype' :\n      return getFormComponent(type.meta.type, options);\n    default :\n      t.fail(`[${SOURCE}] unsupported type ${name}`);\n  }\n}\n\nfunction sortByText(a, b) {\n  return a.text < b.text ? -1 : a.text > b.text ? 1 : 0;\n}\n\nfunction getComparator(order) {\n  return {\n    asc: sortByText,\n    desc: (a, b) => -sortByText(a, b)\n  }[order];\n}\n\nclass Component extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.typeInfo = getTypeInfo(props.type);\n    this.state = {\n      hasError: false,\n      value: this.getTransformer().format(props.value)\n    };\n  }\n\n  getTransformer() {\n    return this.props.options.transformer || this.constructor.transformer;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const should = (\n      nextState.value !== this.state.value ||\n      nextState.hasError !== this.state.hasError ||\n      nextProps.options !== this.props.options ||\n      nextProps.type !== this.props.type\n    );\n    return should;\n  }\n\n  componentWillReceiveProps(props) {\n    if (props.type !== this.props.type) {\n      this.typeInfo = getTypeInfo(props.type);\n    }\n    this.setState({value: this.getTransformer().format(props.value)});\n  }\n\n  onChange(value) {\n    this.setState({value}, () => this.props.onChange(value, this.props.ctx.path));\n  }\n\n  getValidationOptions() {\n    return {\n      path: this.props.ctx.path,\n      context: t.mixin(t.mixin({}, this.props.context || this.props.ctx.context), { options: this.props.options })\n    };\n  }\n\n  getValue() {\n    return this.getTransformer().parse(this.state.value);\n  }\n\n  isValueNully() {\n    return Nil.is(this.getValue());\n  }\n\n  removeErrors() {\n    this.setState({hasError: false});\n  }\n\n  pureValidate() {\n    return t.validate(this.getValue(), this.props.type, this.getValidationOptions());\n  }\n\n  validate() {\n    const result = this.pureValidate();\n    this.setState({hasError: !result.isValid()});\n    return result;\n  }\n\n  getAuto() {\n    return this.props.options.auto || this.props.ctx.auto;\n  }\n\n  getI18n() {\n    return this.props.options.i18n || this.props.ctx.i18n;\n  }\n\n  getDefaultLabel() {\n    const ctx = this.props.ctx;\n    if (ctx.label) {\n      return ctx.label + (this.typeInfo.isMaybe ? this.getI18n().optional : this.getI18n().required);\n    }\n  }\n\n  getLabel() {\n    let label = this.props.options.label || this.props.options.legend;\n    if (Nil.is(label) && this.getAuto() === 'labels') {\n      label = this.getDefaultLabel();\n    }\n    return label;\n  }\n\n  getError() {\n    if (this.hasError()) {\n      const error = this.props.options.error || this.typeInfo.getValidationErrorMessage;\n      if (t.Function.is(error)) {\n        const validationOptions = this.getValidationOptions();\n        return error(this.getValue(), validationOptions.path, validationOptions.context);\n      }\n      return error;\n    }\n  }\n\n  hasError() {\n    return this.props.options.hasError || this.state.hasError;\n  }\n\n  getConfig() {\n    return merge(this.props.ctx.config, this.props.options.config);\n  }\n\n  getStylesheet() {\n    return this.props.options.stylesheet || this.props.ctx.stylesheet;\n  }\n\n  getLocals() {\n    return {\n      path: this.props.ctx.path,\n      error: this.getError(),\n      hasError: this.hasError(),\n      label: this.getLabel(),\n      onChange: this.onChange.bind(this),\n      config: this.getConfig(),\n      value: this.state.value,\n      hidden: this.props.options.hidden,\n      stylesheet: this.getStylesheet()\n    };\n  }\n\n  render() {\n    const locals = this.getLocals();\n    // getTemplate is the only required implementation when extending Component\n    t.assert(t.Function.is(this.getTemplate), `[${SOURCE}] missing getTemplate method of component ${this.constructor.name}`);\n    const template = this.getTemplate();\n    return template(locals);\n  }\n\n}\n\nComponent.transformer = {\n  format: value => Nil.is(value) ? null : value,\n  parse: value => value\n};\n\nfunction toNull(value) {\n  return (t.String.is(value) && value.trim() === '') || Nil.is(value) ? null : value;\n}\n\nfunction parseNumber(value) {\n  const n = parseFloat(value);\n  const isNumeric = (value - n + 1) >= 0;\n  return isNumeric ? n : toNull(value);\n}\n\nclass Textbox extends Component {\n\n  getTransformer() {\n    const options = this.props.options;\n    return options.transformer ? options.transformer :\n      this.typeInfo.innerType === t.Number ? Textbox.numberTransformer :\n      Textbox.transformer;\n  }\n\n  getTemplate() {\n    return this.props.options.template || this.props.ctx.templates.textbox;\n  }\n\n  getPlaceholder() {\n    let placeholder = this.props.options.placeholder;\n    if (Nil.is(placeholder) && this.getAuto() === 'placeholders') {\n      placeholder = this.getDefaultLabel();\n    }\n    return placeholder;\n  }\n\n  getKeyboardType() {\n    const keyboardType = this.props.options.keyboardType;\n    if (t.Nil.is(keyboardType) && this.typeInfo.innerType === t.Number) {\n      return 'numeric';\n    }\n    return keyboardType;\n  }\n\n  getLocals() {\n    const locals = super.getLocals();\n    locals.placeholder = this.getPlaceholder();\n    locals.onChangeNative = this.props.options.onChange;\n    locals.keyboardType = this.getKeyboardType();\n    locals.underlineColorAndroid = (this.props.options.underlineColorAndroid || 'transparent');\n\n    [\n      'help',\n      'autoCapitalize',\n      'autoCorrect',\n      'autoFocus',\n      'blurOnSubmit',\n      'editable',\n      'maxLength',\n      'multiline',\n      'onBlur',\n      'onEndEditing',\n      'onFocus',\n      'onLayout',\n      'onSelectionChange',\n      'onSubmitEditing',\n      'onContentSizeChange',\n      'placeholderTextColor',\n      'secureTextEntry',\n      'selectTextOnFocus',\n      'selectionColor',\n      'numberOfLines',\n      'clearButtonMode',\n      'clearTextOnFocus',\n      'enablesReturnKeyAutomatically',\n      'keyboardAppearance',\n      'onKeyPress',\n      'returnKeyType',\n      'selectionState'\n    ].forEach((name) => locals[name] = this.props.options[name]);\n\n    return locals;\n  }\n\n}\n\nTextbox.transformer = {\n  format: value => Nil.is(value) ? '' : value,\n  parse: toNull\n};\n\nTextbox.numberTransformer = {\n  format: value => Nil.is(value) ? '' : String(value),\n  parse: parseNumber\n};\n\nclass Checkbox extends Component {\n\n  getTemplate() {\n    return this.props.options.template || this.props.ctx.templates.checkbox;\n  }\n\n  getLocals() {\n    const locals = super.getLocals();\n    // checkboxes must always have a label\n    locals.label = locals.label || this.getDefaultLabel();\n\n    [\n      'help',\n      'disabled',\n      'onTintColor',\n      'thumbTintColor',\n      'tintColor'\n    ].forEach((name) => locals[name] = this.props.options[name]);\n\n    return locals;\n  }\n\n}\n\nCheckbox.transformer = {\n  format: value => Nil.is(value) ? false : value,\n  parse: value => value\n};\n\nclass Select extends Component {\n\n  getTransformer() {\n    const options = this.props.options;\n    if (options.transformer) {\n      return options.transformer;\n    }\n    return Select.transformer(this.getNullOption());\n  }\n\n  getTemplate() {\n    return this.props.options.template || this.props.ctx.templates.select;\n  }\n\n  getNullOption() {\n    return this.props.options.nullOption || {value: '', text: '-'};\n  }\n\n  getEnum() {\n    return this.typeInfo.innerType;\n  }\n\n  getOptions() {\n    const options = this.props.options;\n    const items = options.options ? options.options.slice() : getOptionsOfEnum(this.getEnum());\n    if (options.order) {\n      items.sort(getComparator(options.order));\n    }\n    const nullOption = this.getNullOption();\n    if (options.nullOption !== false) {\n      items.unshift(nullOption);\n    }\n    return items;\n  }\n\n  getLocals() {\n    const locals = super.getLocals();\n    locals.options = this.getOptions();\n\n    [\n      'help',\n      'enabled',\n      'mode',\n      'prompt',\n      'itemStyle'\n    ].forEach((name) => locals[name] = this.props.options[name]);\n\n    return locals;\n  }\n\n}\n\nSelect.transformer = (nullOption) => {\n  return {\n    format: value => Nil.is(value) && nullOption ? nullOption.value : String(value),\n    parse: value => nullOption && nullOption.value === value ? null : value\n  };\n};\n\nclass DatePicker extends Component {\n\n  getTemplate() {\n    return this.props.options.template || this.props.ctx.templates.datepicker;\n  }\n\n  getLocals() {\n    const locals = super.getLocals();\n    [\n      'help',\n      'maximumDate',\n      'minimumDate',\n      'minuteInterval',\n      'mode',\n      'timeZoneOffsetInMinutes'\n    ].forEach((name) => locals[name] = this.props.options[name]);\n\n    return locals;\n  }\n\n}\n\nDatePicker.transformer = {\n  format: value => Nil.is(value) ? new Date() : value,\n  parse: value => value\n};\n\nclass Struct extends Component {\n\n  isValueNully() {\n    return Object.keys(this.refs).every((ref) => this.refs[ref].isValueNully());\n  }\n\n  removeErrors() {\n    this.setState({hasError: false});\n    Object.keys(this.refs).forEach((ref) => this.refs[ref].removeErrors());\n  }\n\n  getValue() {\n    const value = {};\n    for (const ref in this.refs) {\n      value[ref] = this.refs[ref].getValue();\n    }\n    return this.getTransformer().parse(value);\n  }\n\n  validate() {\n    let value = {};\n    let errors = [];\n    let hasError = false;\n    let result;\n\n    if (this.typeInfo.isMaybe && this.isValueNully()) {\n      this.removeErrors();\n      return new t.ValidationResult({errors: [], value: null});\n    }\n\n    for (const ref in this.refs) {\n      if (this.refs.hasOwnProperty(ref)) {\n        result = this.refs[ref].validate();\n        errors = errors.concat(result.errors);\n        value[ref] = result.value;\n      }\n    }\n\n    if (errors.length === 0) {\n      const InnerType = this.typeInfo.innerType;\n      value = new InnerType(value);\n      if (this.typeInfo.isSubtype && errors.length === 0) {\n        result = t.validate(value, this.props.type, this.getValidationOptions());\n        hasError = !result.isValid();\n        errors = errors.concat(result.errors);\n      }\n    }\n\n    this.setState({hasError: hasError});\n    return new t.ValidationResult({errors, value});\n  }\n\n  onChange(fieldName, fieldValue, path) {\n    const value = t.mixin({}, this.state.value);\n    value[fieldName] = fieldValue;\n    this.setState({value}, () => {\n      this.props.onChange(value, path);\n    });\n  }\n\n  getTemplates() {\n    return merge(this.props.ctx.templates, this.props.options.templates);\n  }\n\n  getTemplate() {\n    return this.props.options.template || this.getTemplates().struct;\n  }\n\n  getTypeProps() {\n    return this.typeInfo.innerType.meta.props;\n  }\n\n  getOrder() {\n    return this.props.options.order || Object.keys(this.getTypeProps());\n  }\n\n  getInputs() {\n    const { ctx, options } = this.props;\n    const props = this.getTypeProps();\n    const auto = this.getAuto();\n    const i18n =  this.getI18n();\n    const config = this.getConfig();\n    const value = this.state.value || {};\n    const templates = this.getTemplates();\n    const stylesheet = this.getStylesheet();\n    const inputs = {};\n    for (const prop in props) {\n      if (props.hasOwnProperty(prop)) {\n        const type = props[prop];\n        const propValue = value[prop];\n        const propType = getTypeFromUnion(type, propValue);\n        const fieldsOptions = options.fields || noobj;\n        const propOptions = getComponentOptions(fieldsOptions[prop], noobj, propValue, type);\n        inputs[prop] = React.createElement(getFormComponent(propType, propOptions), {\n          key: prop,\n          ref: prop,\n          type: propType,\n          options: propOptions,\n          value: value[prop],\n          onChange: this.onChange.bind(this, prop),\n          ctx: {\n            context: ctx.context,\n            uidGenerator: ctx.uidGenerator,\n            auto,\n            config,\n            label: humanize(prop),\n            i18n,\n            stylesheet,\n            templates,\n            path: this.props.ctx.path.concat(prop)\n          }\n        });\n      }\n    }\n    return inputs;\n  }\n\n  getLocals() {\n    const templates = this.getTemplates();\n    const locals = super.getLocals();\n    locals.order = this.getOrder();\n    locals.inputs = this.getInputs();\n    locals.template = templates.struct;\n    return locals;\n  }\n\n}\n\nfunction toSameLength(value, keys, uidGenerator) {\n  if (value.length === keys.length) {\n    return keys;\n  }\n  const ret = [];\n  for (let i = 0, len = value.length; i < len; i++ ) {\n    ret[i] = keys[i] || uidGenerator.next();\n  }\n  return ret;\n}\n\nexport class List extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state.keys = this.state.value.map(() => props.ctx.uidGenerator.next());\n  }\n\n  componentWillReceiveProps(props) {\n    if (props.type !== this.props.type) {\n      this.typeInfo = getTypeInfo(props.type);\n    }\n    const value = this.getTransformer().format(props.value);\n    this.setState({\n      value,\n      keys: toSameLength(value, this.state.keys, props.ctx.uidGenerator)\n    });\n  }\n\n  isValueNully() {\n    return this.state.value.length === 0;\n  }\n\n  removeErrors() {\n    this.setState({ hasError: false });\n    Object.keys(this.refs).forEach((ref) => this.refs[ref].removeErrors());\n  }\n\n  getValue() {\n    const value = [];\n    for (let i = 0, len = this.state.value.length; i < len; i++ ) {\n      if (this.refs.hasOwnProperty(i)) {\n        value.push(this.refs[i].getValue());\n      }\n    }\n    return this.getTransformer().parse(value);\n  }\n\n  validate() {\n    const value = [];\n    let errors = [];\n    let hasError = false;\n    let result;\n\n    if (this.typeInfo.isMaybe && this.isValueNully()) {\n      this.removeErrors();\n      return new t.ValidationResult({errors: [], value: null});\n    }\n\n    for (let i = 0, len = this.state.value.length; i < len; i++ ) {\n      result = this.refs[i].validate();\n      errors = errors.concat(result.errors);\n      value.push(result.value);\n    }\n\n    // handle subtype\n    if (this.typeInfo.isSubtype && errors.length === 0) {\n      result = t.validate(value, this.props.type, this.getValidationOptions());\n      hasError = !result.isValid();\n      errors = errors.concat(result.errors);\n    }\n\n    this.setState({hasError: hasError});\n    return new t.ValidationResult({errors: errors, value: value});\n  }\n\n  onChange(value, keys, path, kind) {\n    const allkeys = toSameLength(value, keys, this.props.ctx.uidGenerator);\n    this.setState({ value, keys: allkeys, isPristine: false }, () => {\n      this.props.onChange(value, path, kind);\n    });\n  }\n\n  addItem() {\n    const value = this.state.value.concat(undefined);\n    const keys = this.state.keys.concat(this.props.ctx.uidGenerator.next());\n    this.onChange(value, keys, this.props.ctx.path.concat(value.length - 1), 'add');\n  }\n\n  onItemChange(itemIndex, itemValue, path, kind) {\n    const value = this.state.value.slice();\n    value[itemIndex] = itemValue;\n    this.onChange(value, this.state.keys, path, kind);\n  }\n\n  removeItem(i) {\n    const value = this.state.value.slice();\n    value.splice(i, 1);\n    const keys = this.state.keys.slice();\n    keys.splice(i, 1);\n    this.onChange(value, keys, this.props.ctx.path.concat(i), 'remove');\n  }\n\n  moveUpItem(i) {\n    if (i > 0) {\n      this.onChange(\n        move(this.state.value.slice(), i, i - 1),\n        move(this.state.keys.slice(), i, i - 1),\n        this.props.ctx.path.concat(i),\n        'moveUp'\n      );\n    }\n  }\n\n  moveDownItem(i) {\n    if (i < this.state.value.length - 1) {\n      this.onChange(\n        move(this.state.value.slice(), i, i + 1),\n        move(this.state.keys.slice(), i, i + 1),\n        this.props.ctx.path.concat(i),\n        'moveDown'\n      );\n    }\n  }\n\n  getTemplates() {\n    return merge(this.props.ctx.templates, this.props.options.templates);\n  }\n\n  getTemplate() {\n    return this.props.options.template || this.getTemplates().list;\n  }\n\n  getItems() {\n    const { options, ctx } = this.props;\n    const auto = this.getAuto();\n    const i18n = this.getI18n();\n    const config = this.getConfig();\n    const stylesheet = this.getStylesheet();\n    const templates = this.getTemplates();\n    const value = this.state.value;\n    return value.map((itemValue, i) => {\n      const type = this.typeInfo.innerType.meta.type;\n      const itemType = getTypeFromUnion(type, itemValue);\n      const itemOptions = getComponentOptions(options.item, noobj, itemValue, type);\n      const ItemComponent = getFormComponent(itemType, itemOptions);\n      const buttons = [];\n      if (!options.disableRemove) {\n        buttons.push({\n          type: 'remove',\n          label: i18n.remove,\n          click: this.removeItem.bind(this, i)\n        });\n      }\n      if (!options.disableOrder) {\n        buttons.push({\n          type: 'move-up',\n          label: i18n.up,\n          click: this.moveUpItem.bind(this, i)\n        },\n        {\n          type: 'move-down',\n          label: i18n.down,\n          click: this.moveDownItem.bind(this, i)\n        });\n      }\n      return {\n        input: React.createElement(ItemComponent, {\n          ref: i,\n          type: itemType,\n          options: itemOptions,\n          value: itemValue,\n          onChange: this.onItemChange.bind(this, i),\n          ctx: {\n            context: ctx.context,\n            uidGenerator: ctx.uidGenerator,\n            auto,\n            config,\n            label: ctx.label ? `${ctx.label}[${i + 1}]` : String(i + 1),\n            i18n,\n            stylesheet,\n            templates,\n            path: ctx.path.concat(i)\n          }\n        }),\n        key: this.state.keys[i],\n        buttons: buttons\n      };\n    });\n  }\n\n  getLocals() {\n    const options = this.props.options;\n    const i18n = this.getI18n();\n    const locals = super.getLocals();\n    locals.add = options.disableAdd ? null : {\n      type: 'add',\n      label: i18n.add,\n      click: this.addItem.bind(this)\n    };\n    locals.items = this.getItems();\n    locals.className = options.className;\n    return locals;\n  }\n\n}\n\nList.transformer = {\n  format: value => Nil.is(value) ? noarr : value,\n  parse: value => value\n};\n\nclass Form extends React.Component {\n\n  validate() {\n    return this.refs.input.validate();\n  }\n\n  getValue() {\n    const result = this.validate();\n    return result.isValid() ? result.value : null;\n  }\n\n  getComponent(path) {\n    path = t.String.is(path) ? path.split('.') : path;\n    return path.reduce((input, name) => input.refs[name], this.refs.input);\n  }\n\n  getSeed() {\n    const rii = this._reactInternalInstance;\n    if (rii) {\n      if (rii._hostContainerInfo) {\n        return rii._hostContainerInfo._idCounter;\n      }\n      if (rii._nativeContainerInfo) {\n        return rii._nativeContainerInfo._idCounter;\n      }\n      if (rii._rootNodeID) {\n        return rii._rootNodeID;\n      }\n    }\n    return '0';\n  }\n\n  getUIDGenerator() {\n    this.uidGenerator = this.uidGenerator || new UIDGenerator(this.getSeed());\n    return this.uidGenerator;\n  }\n\n  render() {\n\n    const stylesheet = this.props.stylesheet || Form.stylesheet;\n    const templates = this.props.templates || Form.templates;\n    const i18n = this.props.i18n || Form.i18n;\n\n    if (process.env.NODE_ENV !== 'production') {\n      t.assert(t.isType(this.props.type), `[${SOURCE}] missing required prop type`);\n      t.assert(t.maybe(t.Object).is(this.props.options) || t.Function.is(this.props.options) || t.list(t.maybe(t.Object)).is(this.props.options), `[${SOURCE}] prop options, if specified, must be an object, a function returning the options or a list of options for unions`);\n      t.assert(t.Object.is(stylesheet), `[${SOURCE}] missing stylesheet config`);\n      t.assert(t.Object.is(templates), `[${SOURCE}] missing templates config`);\n      t.assert(t.Object.is(i18n), `[${SOURCE}] missing i18n config`);\n    }\n\n    const value = this.props.value;\n    const type = getTypeFromUnion(this.props.type, value);\n    const options = getComponentOptions(this.props.options, noobj, value, this.props.type);\n\n    // this is in the render method because I need this._reactInternalInstance._rootNodeID in React ^0.14.0\n    // and this._reactInternalInstance._nativeContainerInfo._idCounter in React ^15.0.0\n    const uidGenerator = this.getUIDGenerator();\n\n    return React.createElement(getFormComponent(type, options), {\n      ref: 'input',\n      type: type,\n      options: options,\n      value: this.props.value,\n      onChange: this.props.onChange || noop,\n      ctx: {\n        context: this.props.context,\n        uidGenerator,\n        auto: 'labels',\n        stylesheet,\n        templates,\n        i18n,\n        path: []\n      }\n    });\n  }\n\n}\n\nmodule.exports = {\n  getComponent: getFormComponent,\n  Component,\n  Textbox,\n  Checkbox,\n  Select,\n  DatePicker,\n  Struct,\n  List: List,\n  Form\n};\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/util.js":"import t, { mixin } from 'tcomb-validation';\n\nexport function getOptionsOfEnum(type) {\n  const enums = type.meta.map;\n  return Object.keys(enums).map(value => {\n    return {\n      value,\n      text: enums[value]\n    };\n  });\n}\n\nexport function getTypeInfo(type) {\n  let innerType = type;\n  let isMaybe = false;\n  let isSubtype = false;\n  let kind;\n  let innerGetValidationErrorMessage;\n\n  while (innerType) {\n    kind = innerType.meta.kind;\n    if (t.Function.is(innerType.getValidationErrorMessage)) {\n      innerGetValidationErrorMessage = innerType.getValidationErrorMessage;\n    }\n    if (kind === 'maybe') {\n      isMaybe = true;\n      innerType = innerType.meta.type;\n      continue;\n    }\n    if (kind === 'subtype') {\n      isSubtype = true;\n      innerType = innerType.meta.type;\n      continue;\n    }\n    break;\n  }\n\n  const getValidationErrorMessage = innerGetValidationErrorMessage ? (value, path, context) => {\n    const result = t.validate(value, type, {path, context});\n    if (!result.isValid()) {\n      for (let i = 0, len = result.errors.length; i < len; i++ ) {\n        if (t.Function.is(result.errors[i].expected.getValidationErrorMessage)) {\n          return result.errors[i].message;\n        }\n      }\n      return innerGetValidationErrorMessage(value, path, context);\n    }\n  } : undefined;\n\n  return {\n    type,\n    isMaybe,\n    isSubtype,\n    innerType,\n    getValidationErrorMessage\n  };\n}\n\n// thanks to https://github.com/epeli/underscore.string\n\nfunction underscored(s) {\n  return s.trim().replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n}\n\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nexport function humanize(s) {\n  return capitalize(underscored(s).replace(/_id$/, '').replace(/_/g, ' '));\n}\n\nexport function merge(a, b) {\n  return mixin(mixin({}, a), b, true);\n}\n\nexport function move(arr, fromIndex, toIndex) {\n  const element = arr.splice(fromIndex, 1)[0];\n  arr.splice(toIndex, 0, element);\n  return arr;\n}\n\nexport class UIDGenerator {\n\n  constructor(seed) {\n    this.seed = 'tfid-' + seed + '-';\n    this.counter = 0;\n  }\n\n  next() {\n    return this.seed + (this.counter++); // eslint-disable-line space-unary-ops\n  }\n\n}\n\nfunction containsUnion(type) {\n  switch (type.meta.kind) {\n  case 'union' :\n    return true;\n  case 'maybe' :\n  case 'subtype' :\n    return containsUnion(type.meta.type);\n  default :\n    return false;\n  }\n}\n\nfunction getUnionConcreteType(type, value) {\n  const kind = type.meta.kind;\n  if (kind === 'union') {\n    const concreteType = type.dispatch(value);\n    if (process.env.NODE_ENV !== 'production') {\n      t.assert(t.isType(concreteType), () => 'Invalid value ' + t.assert.stringify(value) + ' supplied to ' + t.getTypeName(type) + ' (no constructor returned by dispatch)' );\n    }\n    return concreteType;\n  } else if (kind === 'maybe') {\n    return t.maybe(getUnionConcreteType(type.meta.type, value), type.meta.name);\n  } else if (kind === 'subtype') {\n    return t.subtype(getUnionConcreteType(type.meta.type, value), type.meta.predicate, type.meta.name);\n  }\n}\n\nexport function getTypeFromUnion(type, value) {\n  if (containsUnion(type)) {\n    return getUnionConcreteType(type, value);\n  }\n  return type;\n}\n\nfunction getUnion(type) {\n  if (type.meta.kind === 'union') {\n    return type;\n  }\n  return getUnion(type.meta.type);\n}\n\nfunction findIndex(arr, element) {\n  for (let i = 0, len = arr.length; i < len; i++ ) {\n    if (arr[i] === element) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function getComponentOptions(options, defaultOptions, value, type) {\n  if (t.Nil.is(options)) {\n    return defaultOptions;\n  }\n  if (t.Function.is(options)) {\n    return options(value);\n  }\n  if (t.Array.is(options) && containsUnion(type)) {\n    const union = getUnion(type);\n    const concreteType = union.dispatch(value);\n    const index = findIndex(union.meta.types, concreteType);\n    // recurse\n    return getComponentOptions(options[index], defaultOptions, value, concreteType);\n  }\n  return options;\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/i18n/en.js":"module.exports = {\n  optional: ' (optional)',\n  required: '',\n  add: 'Add',\n  remove: '✘',\n  up: '↑',\n  down: '↓'\n};","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/stylesheets/bootstrap.js":"/*\n\n  a bootstrap like style\n\n*/\n'use strict';\n\nimport { Platform } from 'react-native';\n\nvar LABEL_COLOR = '#000000';\nvar INPUT_COLOR = '#000000';\nvar ERROR_COLOR = '#a94442';\nvar HELP_COLOR = '#999999';\nvar BORDER_COLOR = '#cccccc';\nvar DISABLED_COLOR = '#777777';\nvar DISABLED_BACKGROUND_COLOR = '#eeeeee';\nvar FONT_SIZE = 17;\nvar FONT_WEIGHT = '500';\n\nvar stylesheet = Object.freeze({\n  fieldset: {},\n  // the style applied to the container of all inputs\n  formGroup: {\n    normal: {\n      marginBottom: 10\n    },\n    error: {\n      marginBottom: 10\n    }\n  },\n  controlLabel: {\n    normal: {\n      color: LABEL_COLOR,\n      fontSize: FONT_SIZE,\n      marginBottom: 7,\n      fontWeight: FONT_WEIGHT\n    },\n    // the style applied when a validation error occours\n    error: {\n      color: ERROR_COLOR,\n      fontSize: FONT_SIZE,\n      marginBottom: 7,\n      fontWeight: FONT_WEIGHT\n    }\n  },\n  helpBlock: {\n    normal: {\n      color: HELP_COLOR,\n      fontSize: FONT_SIZE,\n      marginBottom: 2\n    },\n    // the style applied when a validation error occours\n    error: {\n      color: HELP_COLOR,\n      fontSize: FONT_SIZE,\n      marginBottom: 2\n    }\n  },\n  errorBlock: {\n    fontSize: FONT_SIZE,\n    marginBottom: 2,\n    color: ERROR_COLOR\n  },\n  textboxView: {\n    normal: {\n    },\n    error: {\n    },\n    notEditable: {\n    }\n  },\n  textbox: {\n    normal: {\n      color: INPUT_COLOR,\n      fontSize: FONT_SIZE,\n      height: 36,\n      paddingVertical: (Platform.OS === 'ios') ? 7 : 0,\n      paddingHorizontal: 7,\n      borderRadius: 4,\n      borderColor: BORDER_COLOR,\n      borderWidth: 1,\n      marginBottom: 5\n    },\n    // the style applied when a validation error occours\n    error: {\n      color: INPUT_COLOR,\n      fontSize: FONT_SIZE,\n      height: 36,\n      paddingVertical: (Platform.OS === 'ios') ? 7 : 0,\n      paddingHorizontal: 7,\n      borderRadius: 4,\n      borderColor: ERROR_COLOR,\n      borderWidth: 1,\n      marginBottom: 5\n    },\n    // the style applied when the textbox is not editable\n    notEditable: {\n      fontSize: FONT_SIZE,\n      height: 36,\n      paddingVertical: (Platform.OS === 'ios') ? 7 : 0,\n      paddingHorizontal: 7,\n      borderRadius: 4,\n      borderColor: BORDER_COLOR,\n      borderWidth: 1,\n      marginBottom: 5,\n      color: DISABLED_COLOR,\n      backgroundColor: DISABLED_BACKGROUND_COLOR\n    }\n  },\n  checkbox: {\n    normal: {\n      marginBottom: 4\n    },\n    // the style applied when a validation error occours\n    error: {\n      marginBottom: 4\n    }\n  },\n  pickerContainer: {\n    normal: {\n      marginBottom: 4,\n      borderRadius: 4,\n      borderColor: BORDER_COLOR,\n      borderWidth: 1\n    },\n    error: {\n      borderColor: ERROR_COLOR\n    },\n    open: {\n      // Alter styles when select container is open\n    }\n  },\n  select: {\n    normal: Platform.select({\n      android: {\n        paddingLeft: 7,\n        color: INPUT_COLOR\n      },\n      ios: {\n\n      }\n    }),\n    // the style applied when a validation error occours\n    error: Platform.select({\n      android: {\n        paddingLeft: 7,\n        color: ERROR_COLOR\n      },\n      ios: {\n\n      }\n    })\n  },\n  pickerTouchable: {\n    normal: {\n      height: 44,\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    error: {\n      height: 44,\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    active: {\n      borderBottomWidth: 1,\n      borderColor: BORDER_COLOR\n    }\n  },\n  pickerValue: {\n    normal: {\n      fontSize: FONT_SIZE,\n      paddingLeft: 7\n    },\n    error: {\n      fontSize: FONT_SIZE,\n      paddingLeft: 7\n    }\n  },\n  datepicker: {\n    normal: {\n      marginBottom: 4\n    },\n    // the style applied when a validation error occours\n    error: {\n      marginBottom: 4\n    }\n  },\n  dateTouchable: {\n    normal: {},\n    error: {}\n  },\n  dateValue: {\n    normal: {\n      color: INPUT_COLOR,\n      fontSize: FONT_SIZE,\n      padding: 7,\n      marginBottom: 5\n    },\n    error: {\n      color: ERROR_COLOR,\n      fontSize: FONT_SIZE,\n      padding: 7,\n      marginBottom: 5\n    }\n  },\n  buttonText: {\n    fontSize: 18,\n    color: 'white',\n    alignSelf: 'center'\n  },\n  button: {\n    height: 36,\n    backgroundColor: '#48BBEC',\n    borderColor: '#48BBEC',\n    borderWidth: 1,\n    borderRadius: 8,\n    marginBottom: 10,\n    alignSelf: 'stretch',\n    justifyContent: 'center'\n  }\n});\n\nmodule.exports = stylesheet;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/templates/bootstrap/checkbox.js":"var React = require('react');\nvar { View, Text, Switch } = require('react-native');\n\nfunction checkbox(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  var stylesheet = locals.stylesheet;\n  var formGroupStyle = stylesheet.formGroup.normal;\n  var controlLabelStyle = stylesheet.controlLabel.normal;\n  var checkboxStyle = stylesheet.checkbox.normal;\n  var helpBlockStyle = stylesheet.helpBlock.normal;\n  var errorBlockStyle = stylesheet.errorBlock;\n\n  if (locals.hasError) {\n    formGroupStyle = stylesheet.formGroup.error;\n    controlLabelStyle = stylesheet.controlLabel.error;\n    checkboxStyle = stylesheet.checkbox.error;\n    helpBlockStyle = stylesheet.helpBlock.error;\n  }\n\n  var label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  var help = locals.help ? <Text style={helpBlockStyle}>{locals.help}</Text> : null;\n  var error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={errorBlockStyle}>{locals.error}</Text> : null;\n\n  return (\n    <View style={formGroupStyle}>\n      {label}\n      <Switch\n        accessibilityLabel={locals.label}\n        ref=\"input\"\n        disabled={locals.disabled}\n        onTintColor={locals.onTintColor}\n        thumbTintColor={locals.thumbTintColor}\n        tintColor={locals.tintColor}\n        style={checkboxStyle}\n        onValueChange={(value) => locals.onChange(value)}\n        value={locals.value}\n      />\n      {help}\n      {error}\n    </View>\n  );\n}\n\nmodule.exports = checkbox;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/templates/bootstrap/datepicker.android.js":"var React = require('react');\nvar { View, Text, DatePickerAndroid, TimePickerAndroid, TouchableNativeFeedback } = require('react-native');\n\nfunction datepicker(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  var stylesheet = locals.stylesheet;\n  var formGroupStyle = stylesheet.formGroup.normal;\n  var controlLabelStyle = stylesheet.controlLabel.normal;\n  var datepickerStyle = stylesheet.datepicker.normal;\n  var helpBlockStyle = stylesheet.helpBlock.normal;\n  var errorBlockStyle = stylesheet.errorBlock;\n  var dateValueStyle = stylesheet.dateValue.normal;\n\n  if (locals.hasError) {\n    formGroupStyle = stylesheet.formGroup.error;\n    controlLabelStyle = stylesheet.controlLabel.error;\n    datepickerStyle = stylesheet.datepicker.error;\n    helpBlockStyle = stylesheet.helpBlock.error;\n    dateValueStyle = stylesheet.dateValue.error;\n  }\n\n  // Setup the picker mode\n  var datePickerMode = 'date';\n  if (locals.mode === 'date' || locals.mode === 'time') {\n    datePickerMode = locals.mode;\n  }\n\n  /**\n   * Check config locals for Android datepicker.\n   * ``locals.config.background``: `TouchableNativeFeedback` background prop\n   * ``locals.config.format``: Date format function\n   */\n  var formattedValue = String(locals.value);\n  var background = TouchableNativeFeedback.SelectableBackground(); // eslint-disable-line new-cap\n  if (locals.config) {\n    if (locals.config.format) {\n      formattedValue = locals.config.format(locals.value);\n    }\n    if (locals.config.background) {\n      background = locals.config.background;\n    }\n  }\n\n  var label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  var help = locals.help ? <Text style={helpBlockStyle}>{locals.help}</Text> : null;\n  var error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={errorBlockStyle}>{locals.error}</Text> : null;\n  var value = locals.value ? <Text style={dateValueStyle}>{formattedValue}</Text> : null;\n\n  return (\n    <View style={formGroupStyle}>\n      <TouchableNativeFeedback\n        accessible={true}\n        ref=\"input\"\n        background={background}\n        onPress={function () {\n          if (datePickerMode === 'time') {\n            TimePickerAndroid.open({is24Hour: true})\n            .then(function (time) {\n              if (time.action !== TimePickerAndroid.dismissedAction) {\n                const newTime = new Date();\n                newTime.setHours(time.hour);\n                newTime.setMinutes(time.minute);\n                locals.onChange(newTime);\n              }\n            });\n          } else {\n            let config = {\n              date: locals.value || new Date()\n            };\n            if (locals.minimumDate) {\n              config.minDate = locals.minimumDate;\n            }\n            if (locals.maximumDate) {\n              config.maxDate = locals.maximumDate;\n            }\n            DatePickerAndroid.open(config)\n            .then(function (date) {\n              if (date.action !== DatePickerAndroid.dismissedAction) {\n                var newDate = new Date(date.year, date.month, date.day);\n                locals.onChange(newDate);\n              }\n            });\n          }\n        }}>\n        <View>\n          {label}\n          {value}\n        </View>\n      </TouchableNativeFeedback>\n      {help}\n      {error}\n    </View>\n  );\n}\n\nmodule.exports = datepicker;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/templates/bootstrap/datepicker.ios.js":"import React, { PropTypes } from 'react';\nimport { Animated, View, TouchableOpacity, Text, DatePickerIOS } from 'react-native';\n\nconst UIPICKER_HEIGHT = 216;\n\nclass CollapsibleDatePickerIOS extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCollapsed: true,\n      height: new Animated.Value(0)\n    };\n  }\n\n  render() {\n    const locals = this.props.locals;\n    const stylesheet = locals.stylesheet;\n    let touchableStyle = stylesheet.dateTouchable.normal;\n    let datepickerStyle = stylesheet.datepicker.normal;\n    let dateValueStyle = stylesheet.dateValue.normal;\n    if (locals.hasError) {\n      touchableStyle = stylesheet.dateTouchable.error;\n      datepickerStyle = stylesheet.datepicker.error;\n      dateValueStyle = stylesheet.dateValue.error;\n    }\n    let formattedValue = String(locals.value);\n    let animation = Animated.timing;\n    let animationConfig = {\n      duration: 200\n    };\n    if (locals.config) {\n      if (locals.config.format) {\n        formattedValue = locals.config.format(locals.value);\n      }\n      if (locals.config.animation) {\n        animation = locals.config.animation;\n      }\n      if (locals.config.animationConfig) {\n        animationConfig = locals.config.animationConfig;\n      }\n    }\n    const height = (this.state.isCollapsed) ? 0 : UIPICKER_HEIGHT;\n    return (\n      <View>\n        <TouchableOpacity style={touchableStyle}\n          onPress={() => {\n            animation(this.state.height, Object.assign({\n              toValue: (this.state.isCollapsed) ? UIPICKER_HEIGHT : 0\n            }, animationConfig)).start();\n            this.setState({isCollapsed: !this.state.isCollapsed});\n          }}>\n          <Text style={dateValueStyle}>\n            {formattedValue}\n          </Text>\n        </TouchableOpacity>\n        <Animated.View style={{height: this.state.height, overflow: 'hidden'}}>\n          <DatePickerIOS\n            ref=\"input\"\n            accessibilityLabel={locals.label}\n            date={locals.value}\n            maximumDate={locals.maximumDate}\n            minimumDate={locals.minimumDate}\n            minuteInterval={locals.minuteInterval}\n            mode={locals.mode}\n            onDateChange={(value) => locals.onChange(value)}\n            timeZoneOffsetInMinutes={locals.timeZoneOffsetInMinutes}\n            style={[datepickerStyle, {height: height}]}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nCollapsibleDatePickerIOS.propTypes = {\n  locals: PropTypes.object.isRequired\n};\n\nfunction datepicker(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  const stylesheet = locals.stylesheet;\n  let formGroupStyle = stylesheet.formGroup.normal;\n  let controlLabelStyle = stylesheet.controlLabel.normal;\n  let helpBlockStyle = stylesheet.helpBlock.normal;\n  const errorBlockStyle = stylesheet.errorBlock;\n\n  if (locals.hasError) {\n    formGroupStyle = stylesheet.formGroup.error;\n    controlLabelStyle = stylesheet.controlLabel.error;\n    helpBlockStyle = stylesheet.helpBlock.error;\n  }\n\n  const label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  const help = locals.help ? <Text style={helpBlockStyle}>{locals.help}</Text> : null;\n  const error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={errorBlockStyle}>{locals.error}</Text> : null;\n\n  return (\n    <View style={formGroupStyle}>\n      {label}\n      <CollapsibleDatePickerIOS locals={locals} />\n      {help}\n      {error}\n    </View>\n  );\n}\n\nmodule.exports = datepicker;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/templates/bootstrap/list.js":"var React = require('react');\nvar { View, Text, TouchableHighlight } = require('react-native');\n\nfunction renderRowWithoutButtons(item) {\n  return <View key={item.key}>{item.input}</View>;\n}\n\nfunction renderRowButton(button, stylesheet, style) {\n  return (\n    <TouchableHighlight key={button.type} style={[stylesheet.button, style]} onPress={button.click}>\n      <Text style={stylesheet.buttonText}>{button.label}</Text>\n    </TouchableHighlight>\n  );\n}\n\nfunction renderButtonGroup(buttons, stylesheet) {\n  return (\n    <View style={{flexDirection: 'row'}}>\n      {buttons.map(button => renderRowButton(button, stylesheet, { width: 50 }))}\n    </View>\n  );\n}\n\nfunction renderRow(item, stylesheet) {\n  return (\n    <View key={item.key} style={{flexDirection: 'row'}}>\n      <View style={{flex: 1}}>\n        {item.input}\n      </View>\n      <View style={{flex: 1}}>\n        {renderButtonGroup(item.buttons, stylesheet)}\n      </View>\n    </View>\n  );\n}\n\nfunction list(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  var stylesheet = locals.stylesheet;\n  var fieldsetStyle = stylesheet.fieldset;\n  var controlLabelStyle = stylesheet.controlLabel.normal;\n\n  if (locals.hasError) {\n    controlLabelStyle = stylesheet.controlLabel.error;\n  }\n\n  var label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  var error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={stylesheet.errorBlock}>{locals.error}</Text> : null;\n\n  var rows = locals.items.map(function (item) {\n    return item.buttons.length === 0 ?\n      renderRowWithoutButtons(item) :\n      renderRow(item, stylesheet);\n  });\n\n  var addButton = locals.add ?\n    renderRowButton(locals.add, stylesheet) :\n    null;\n\n  return (\n    <View style={fieldsetStyle}>\n      {label}\n      {error}\n      {rows}\n      {addButton}\n    </View>\n  );\n}\n\nmodule.exports = list;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/templates/bootstrap/select.android.js":"var React = require('react');\nvar { View, Text, Picker } = require('react-native');\n\nfunction select(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  var stylesheet = locals.stylesheet;\n  var formGroupStyle = stylesheet.formGroup.normal;\n  var controlLabelStyle = stylesheet.controlLabel.normal;\n  var selectStyle = Object.assign({}, stylesheet.select.normal, stylesheet.pickerContainer.normal);\n  var helpBlockStyle = stylesheet.helpBlock.normal;\n  var errorBlockStyle = stylesheet.errorBlock;\n\n  if (locals.hasError) {\n    formGroupStyle = stylesheet.formGroup.error;\n    controlLabelStyle = stylesheet.controlLabel.error;\n    selectStyle = stylesheet.select.error;\n    helpBlockStyle = stylesheet.helpBlock.error;\n  }\n\n  var label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  var help = locals.help ? <Text style={helpBlockStyle}>{locals.help}</Text> : null;\n  var error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={errorBlockStyle}>{locals.error}</Text> : null;\n\n  var options = locals.options.map(({value, text}) => <Picker.Item key={value} value={value} label={text} />);\n\n  return (\n    <View style={formGroupStyle}>\n      {label}\n      <Picker\n        accessibilityLabel={locals.label}\n        ref=\"input\"\n        style={selectStyle}\n        selectedValue={locals.value}\n        onValueChange={locals.onChange}\n        help={locals.help}\n        enabled={locals.enabled}\n        mode={locals.mode}\n        prompt={locals.prompt}\n        itemStyle={locals.itemStyle}\n      >\n        {options}\n      </Picker>\n      {help}\n      {error}\n    </View>\n  );\n}\n\nmodule.exports = select;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/templates/bootstrap/select.ios.js":"import React, { PropTypes } from 'react';\nimport { Animated, View, TouchableOpacity, Text, Picker } from 'react-native';\n\nconst UIPICKER_HEIGHT = 216;\n\nclass CollapsiblePickerIOS extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCollapsed: true,\n      height: new Animated.Value(0)\n    };\n  }\n\n  render() {\n    const locals = this.props.locals;\n    const { stylesheet } = locals;\n    let pickerContainer = stylesheet.pickerContainer.normal;\n    let pickerContainerOpen = stylesheet.pickerContainer.open;\n    let selectStyle = stylesheet.select.normal;\n    let touchableStyle = stylesheet.pickerTouchable.normal;\n    let touchableStyleActive = stylesheet.pickerTouchable.active;\n    let pickerValue = stylesheet.pickerValue.normal;\n    if (locals.hasError) {\n      selectStyle = stylesheet.select.error;\n      touchableStyle = stylesheet.pickerTouchable.error;\n      pickerValue = stylesheet.pickerValue.error;\n    }\n\n    let animation = Animated.timing;\n    let animationConfig = {\n      duration: 200\n    };\n    if (locals.config) {\n      if (locals.config.animation) {\n        animation = locals.config.animation;\n      }\n      if (locals.config.animationConfig) {\n        animationConfig = locals.config.animationConfig;\n      }\n    }\n\n    const options = locals.options.map(({value, text}) => <Picker.Item key={value} value={value} label={text} />);\n    const selectedOption = locals.options.find(option => option.value === locals.value);\n\n    const height = (this.state.isCollapsed) ? 0 : UIPICKER_HEIGHT;\n    return (\n      <View style={[pickerContainer, (!this.state.isCollapsed) ? pickerContainerOpen : {}]}>\n        <TouchableOpacity style={[touchableStyle, this.state.isCollapsed ? {} : touchableStyleActive]}\n          onPress={() => {\n            animation(this.state.height, Object.assign({\n              toValue: (this.state.isCollapsed) ? UIPICKER_HEIGHT : 0\n            }, animationConfig)).start();\n            this.setState({isCollapsed: !this.state.isCollapsed});\n          }}>\n          <Text style={pickerValue}>\n            {selectedOption.text}\n          </Text>\n        </TouchableOpacity>\n        <Animated.View style={{height: this.state.height, overflow: 'hidden'}}>\n          <Picker\n            accessibilityLabel={locals.label}\n            ref=\"input\"\n            style={selectStyle}\n            selectedValue={locals.value}\n            onValueChange={locals.onChange}\n            help={locals.help}\n            enabled={locals.enabled}\n            mode={locals.mode}\n            prompt={locals.prompt}\n            itemStyle={locals.itemStyle}\n          >\n            {options}\n          </Picker>\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nCollapsiblePickerIOS.propTypes = {\n  locals: PropTypes.object.isRequired\n};\n\nfunction select(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  const stylesheet = locals.stylesheet;\n  let formGroupStyle = stylesheet.formGroup.normal;\n  let controlLabelStyle = stylesheet.controlLabel.normal;\n  let selectStyle = stylesheet.select.normal;\n  let helpBlockStyle = stylesheet.helpBlock.normal;\n  let errorBlockStyle = stylesheet.errorBlock;\n\n  if (locals.hasError) {\n    formGroupStyle = stylesheet.formGroup.error;\n    controlLabelStyle = stylesheet.controlLabel.error;\n    selectStyle = stylesheet.select.error;\n    helpBlockStyle = stylesheet.helpBlock.error;\n  }\n\n  const label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  const help = locals.help ? <Text style={helpBlockStyle}>{locals.help}</Text> : null;\n  const error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={errorBlockStyle}>{locals.error}</Text> : null;\n\n  var options = locals.options.map(({value, text}) => <Picker.Item key={value} value={value} label={text} />);\n\n  return (\n    <View style={formGroupStyle}>\n      {label}\n      <CollapsiblePickerIOS locals={locals} />\n      {help}\n      {error}\n    </View>\n  );\n}\n\nmodule.exports = select;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/templates/bootstrap/struct.js":"var React = require('react');\nvar { View, Text } = require('react-native');\n\nfunction struct(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  var stylesheet = locals.stylesheet;\n  var fieldsetStyle = stylesheet.fieldset;\n  var controlLabelStyle = stylesheet.controlLabel.normal;\n\n  if (locals.hasError) {\n    controlLabelStyle = stylesheet.controlLabel.error;\n  }\n\n  var label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  var error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={stylesheet.errorBlock}>{locals.error}</Text> : null;\n\n  var rows = locals.order.map(function (name) {\n    return locals.inputs[name];\n  });\n\n  return (\n    <View style={fieldsetStyle}>\n      {label}\n      {error}\n      {rows}\n    </View>\n  );\n}\n\nmodule.exports = struct;\n","/home/travis/build/npmtest/node-npmtest-tcomb-form-native/node_modules/tcomb-form-native/lib/templates/bootstrap/textbox.js":"var React = require('react');\nvar { View, Text, TextInput } = require('react-native');\n\nfunction textbox(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  var stylesheet = locals.stylesheet;\n  var formGroupStyle = stylesheet.formGroup.normal;\n  var controlLabelStyle = stylesheet.controlLabel.normal;\n  var textboxStyle = stylesheet.textbox.normal;\n  var textboxViewStyle = stylesheet.textboxView.normal;\n  var helpBlockStyle = stylesheet.helpBlock.normal;\n  var errorBlockStyle = stylesheet.errorBlock;\n\n  if (locals.hasError) {\n    formGroupStyle = stylesheet.formGroup.error;\n    controlLabelStyle = stylesheet.controlLabel.error;\n    textboxStyle = stylesheet.textbox.error;\n    textboxViewStyle = stylesheet.textboxView.error;\n    helpBlockStyle = stylesheet.helpBlock.error;\n  }\n\n  if (locals.editable === false) {\n    textboxStyle = stylesheet.textbox.notEditable;\n    textboxViewStyle = stylesheet.textboxView.notEditable;\n  }\n\n  var label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  var help = locals.help ? <Text style={helpBlockStyle}>{locals.help}</Text> : null;\n  var error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={errorBlockStyle}>{locals.error}</Text> : null;\n\n  return (\n    <View style={formGroupStyle}>\n      {label}\n      <View style={textboxViewStyle}>\n        <TextInput\n          accessibilityLabel={locals.label}\n          ref=\"input\"\n          autoCapitalize={locals.autoCapitalize}\n          autoCorrect={locals.autoCorrect}\n          autoFocus={locals.autoFocus}\n          blurOnSubmit={locals.blurOnSubmit}\n          editable={locals.editable}\n          keyboardType={locals.keyboardType}\n          maxLength={locals.maxLength}\n          multiline={locals.multiline}\n          onBlur={locals.onBlur}\n          onEndEditing={locals.onEndEditing}\n          onFocus={locals.onFocus}\n          onLayout={locals.onLayout}\n          onSelectionChange={locals.onSelectionChange}\n          onSubmitEditing={locals.onSubmitEditing}\n          onContentSizeChange={locals.onContentSizeChange}\n          placeholderTextColor={locals.placeholderTextColor}\n          secureTextEntry={locals.secureTextEntry}\n          selectTextOnFocus={locals.selectTextOnFocus}\n          selectionColor={locals.selectionColor}\n          numberOfLines={locals.numberOfLines}\n          underlineColorAndroid={locals.underlineColorAndroid}\n          clearButtonMode={locals.clearButtonMode}\n          clearTextOnFocus={locals.clearTextOnFocus}\n          enablesReturnKeyAutomatically={locals.enablesReturnKeyAutomatically}\n          keyboardAppearance={locals.keyboardAppearance}\n          onKeyPress={locals.onKeyPress}\n          returnKeyType={locals.returnKeyType}\n          selectionState={locals.selectionState}\n          onChangeText={(value) => locals.onChange(value)}\n          onChange={locals.onChangeNative}\n          placeholder={locals.placeholder}\n          style={textboxStyle}\n          value={locals.value}\n        />\n      </View>\n      {help}\n      {error}\n    </View>\n  );\n}\n\nmodule.exports = textbox;\n"}